<?xml version="1.0" encoding="utf-8"?>
<project name="JSON" default="build">
    <property name="bin.dir" value="bin"/>
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="lib"/>
    <property name="test.dir" value="test"/>
    <property name="report.dir" value="report"/>

    <property name="bin.src.dir" value="${bin.dir}/${src.dir}"/>
    <property name="lib.test.dir" value="${lib.dir}/${test.dir}"/>

    <property name="jar.dir" value="jar"/>
    <property name="jar.name" value="com.wildpi.json-6.jar"/>

    <!-- Cleans the bin directory and makes the bin/src directory -->
    <target name="clean">
        <delete dir="${bin.dir}"/>
        <mkdir dir="${bin.src.dir}"/>
    </target>

    <!-- Compiles only the source -->
    <target name="build" depends="clean">
        <javac srcdir="${src.dir}" destdir="${bin.src.dir}" includeantruntime="false" />
    </target>

    <!-- Creates jar -->
    <target name="jar" depends="build">
        <delete dir="${jar.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${jar.name}">
            <fileset dir="${bin.src.dir}"/>
            <fileset dir="${src.dir}"/>
        </jar>
    </target>

    <!-- Executes all JUnit tests and reports coverage and test success -->
    <target name="test" depends="clean">
        <!-- JUnit JARs -->
        <path id="junit.classpath">
            <pathelement location="${lib.test.dir}/junit-4.12.jar"/>
            <pathelement location="${lib.test.dir}/hamcrest-core-1.3.jar"/>
        </path>

        <!-- coverage library -->
        <taskdef resource="org/jacoco/ant/antlib.xml">
            <classpath path="${lib.test.dir}/jacocoant.jar"/>
        </taskdef>

        <!-- Create directory for compiled tests -->
        <property name="bin.test.dir" value="${bin.dir}/test"/>
        <mkdir dir="${bin.test.dir}"/>

        <!-- Compile source with debug information -->
        <javac srcdir="${src.dir}" destdir="${bin.src.dir}" includeantruntime="false" debug="true" />

        <!-- Classpath for running JUnit tests-->
        <path id="test.lib.classpath">
            <path refid="junit.classpath"/>
            <pathelement location="${bin.src.dir}"/>
            <pathelement location="${bin.test.dir}"/>
        </path>

        <!-- Compile test sources -->
        <javac srcdir="${test.dir}" destdir="${bin.test.dir}" includeantruntime="false" debug="true">
            <classpath refid="test.lib.classpath"/>
        </javac>

        <!-- Create/Clean report directories -->
        <delete dir="${report.dir}"/>
        <property name="jacoco.report.dir" value="${report.dir}/jacoco"/>
        <property name="junit.report.dir" value="${report.dir}/junit"/>
        <mkdir dir="${jacoco.report.dir}"/>
        <mkdir dir="${junit.report.dir}"/>

        <property name="jacoco.report.file" value="${jacoco.report.dir}/jacoco.exec"/>

        <!-- Execute tests with coverage analysis -->
        <coverage destfile="${jacoco.report.file}">
            <junit fork="yes" dir="${bin.dir}">
                <classpath refid="test.lib.classpath"/>
                <formatter type="xml"/>
                <batchtest todir="${junit.report.dir}">
                    <fileset dir="${test.dir}" includes="**/*Test.java"/>
                </batchtest>
            </junit>
        </coverage>

        <!-- Create JUnit report -->
        <junitreport todir="${junit.report.dir}">
            <fileset dir="${junit.report.dir}" includes="TEST-*.xml"/>
            <report todir="${junit.report.dir}"/>
        </junitreport>

        <!-- Create JaCoCo report -->
        <report>
            <executiondata>
                <file file="${jacoco.report.file}"/>
            </executiondata>
            <structure name="${ant.project.name}">
                <classfiles>
                    <fileset dir="${bin.src.dir}"/>
                </classfiles>
                <sourcefiles>
                    <fileset dir="src"/>
                </sourcefiles>
            </structure>
            <html destdir="${jacoco.report.dir}"/>
        </report>

    </target>

    <!-- Delete all of the files generated by this build script -->
    <target name="cleanAll">
        <delete dir="${bin.dir}"/>
        <delete dir="${report.dir}"/>
        <delete dir="${jar.dir}"/>
    </target>

</project>